{"version":3,"sources":["logo.svg","lookup/components.js","tweets/create.js","tweets/lookup.js","tweets/buttons.js","tweets/detail.js","tweets/list.js","tweets/components.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","backendLookup","method","endpoint","callback","data","jsonData","JSON","stringify","xhr","XMLHttpRequest","url","responseType","csrftoken","name","cookieValue","document","cookie","cookies","split","i","length","trim","substring","decodeURIComponent","getCookie","open","setRequestHeader","onload","response","status","onerror","e","console","log","send","TweetCreate","props","textAreaRef","React","createRef","didTweet","handleBackendUpdate","alert","className","onSubmit","event","preventDefault","newVal","current","value","content","ref","required","type","ActionBtn","tweet","action","didPerformAction","likes","actionDisplay","display","handleActionBackendEvent","onClick","tweetId","id","apiTweetAction","ParentTweet","parent","Tweet","hideActions","didRetweet","useState","actionTweet","setActionTweet","match","window","location","pathname","urlTweetId","groups","tweetid","isDetail","handlePerformAction","newActionTweet","Fragment","href","TweetsList","tweetsInit","setTweetsInit","tweets","setTweets","tweetsDidSet","setTweetsDidSet","useEffect","final","newTweets","concat","username","apiTweetList","handleDidRetweet","newTweet","updateTweetsInit","unshift","map","item","index","key","TweetsComponent","setNewTweets","canTweet","tempNewTweets","TweetDetailComponent","didLookup","setDidLookup","setTweet","handleBackendLookup","apiTweetDetail","App","src","logo","alt","target","rel","Boolean","hostname","appEl","getElementById","ReactDOM","render","createElement","tweetsEl","dataset","querySelectorAll","forEach","container","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f3188f1e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","function getCookie(name) {\r\n  var cookieValue = null;\r\n  if (document.cookie && document.cookie !== '') {\r\n      var cookies = document.cookie.split(';');\r\n      for (var i = 0; i < cookies.length; i++) {\r\n          var cookie = cookies[i].trim();\r\n          // Does this cookie string begin with the name we want?\r\n          if (cookie.substring(0, name.length + 1) === (name + '=')) {\r\n              cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\r\n              break;\r\n          }\r\n      }\r\n  }\r\n  return cookieValue;\r\n}\r\n\r\nexport function backendLookup(method, endpoint, callback, data) {\r\n  let jsonData;\r\n  if (data){\r\n    jsonData = JSON.stringify(data)\r\n  }\r\n  const xhr = new XMLHttpRequest()\r\n  const url = `http://localhost:8000/api${endpoint}`\r\n  xhr.responseType = \"json\"\r\n  const csrftoken = getCookie('csrftoken');\r\n  xhr.open(method, url)\r\n  xhr.setRequestHeader(\"Content-Type\", \"application/json\")\r\n\r\n  if (csrftoken){\r\n    //xhr.setRequestHeader(\"HTTP_X_REQUESTED_WITH\", \"XMLHttpRequest\")\r\n    xhr.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\")\r\n    xhr.setRequestHeader(\"X-CSRFToken\", csrftoken)\r\n  }\r\n  \r\n  xhr.onload = function() {\r\n    callback(xhr.response, xhr.status)\r\n  }\r\n  xhr.onerror = function (e) {\r\n    console.log(e)\r\n    callback({\"message\": \"The request was an error\"}, 400)\r\n  }\r\n  console.log(jsonData)\r\n  xhr.send(jsonData)\r\n}\r\n\r\n","import React  from 'react'\r\n\r\nimport {\r\n  apiTweetCreate} from './lookup'\r\n\r\n//import {ActionBtn} from './buttons'\r\n//import {TweetsList} from './list'\r\n\r\nexport function TweetCreate(props){\r\n  const textAreaRef = React.createRef()\r\n  const {didTweet} =props\r\n    //const [newTweets, setNewTweets] = useState([])\r\n    \r\n    //const canTweet=props.canTweet===\"false\"?false:true\r\n    const handleBackendUpdate = (response, status) =>{\r\n      // backend api response handler\r\n      //let tempNewTweets = [...newTweets]\r\n      if (status === 201){\r\n        //tempNewTweets.unshift(response)\r\n        didTweet(response)\r\n      } else {\r\n        console.log(response)\r\n        alert(\"An error occured please try again\")\r\n      }\r\n    }\r\n\r\n    const handleSubmit = (event) => {\r\n      event.preventDefault()\r\n      const newVal = textAreaRef.current.value\r\n      // backend api request\r\n      apiTweetCreate(newVal, handleBackendUpdate)\r\n      textAreaRef.current.value = ''\r\n    }\r\n    return  <div className={props.className}>\r\n              <form onSubmit={handleSubmit}>\r\n                <textarea ref={textAreaRef} required={true} className='form-control' name='tweet'>\r\n\r\n                </textarea>\r\n                <button type='submit' className='btn btn-primary my-3'>Tweet</button>\r\n            </form>\r\n            </div>\r\n\r\n}","import {backendLookup} from '../lookup'\r\nexport function apiTweetCreate(newTweet, callback){\r\n    backendLookup(\"POST\", \"/tweets/create/\", callback, {content: newTweet})\r\n  }\r\n\r\n  export function apiTweetDetail(tweetId,callback) {\r\n\r\n     backendLookup(\"GET\",`/tweets/${tweetId}/`, callback)\r\n }\r\n\r\n  export function apiTweetList(username,callback) {\r\n     let endpoint = \"/tweets/\"\r\n    if(username)\r\n    {\r\n      endpoint=`/tweets/?username=${username}`\r\n    }\r\n      backendLookup(\"GET\",endpoint, callback)\r\n  }\r\n  \r\n  export function apiTweetAction(tweetId,action, callback){\r\n      const data={id: tweetId,action: action}\r\n    backendLookup(\"POST\", \"/tweets/action/\", callback, data )\r\n  }\r\n","import React  from 'react'\r\n\r\nimport {\r\n  apiTweetAction,\r\n} from './lookup'\r\n\r\n\r\nexport function ActionBtn(props) {\r\n    const {tweet, action, didPerformAction} = props\r\n    const likes = tweet.likes ? tweet.likes : 0\r\n    const className = props.className ? props.className : 'btn btn-primary btn-sm'\r\n    const actionDisplay = action.display ? action.display : 'Action'\r\n    \r\n    const handleActionBackendEvent = (response, status) =>{\r\n      console.log(response, status)\r\n      if ((status === 200 || status === 201) && didPerformAction){\r\n        didPerformAction(response, status)\r\n      }\r\n    }\r\n    const handleClick = (event) => {\r\n      event.preventDefault()\r\n      apiTweetAction(tweet.id, action.type, handleActionBackendEvent)\r\n        \r\n    }\r\n    const display = action.type === 'like' ? `${likes} ${actionDisplay}` : actionDisplay\r\n    return <button className={className} onClick={handleClick}>{display}</button>\r\n  }\r\n","import React, {useState}  from 'react'\r\n\r\nimport {ActionBtn} from './buttons'\r\n\r\nexport function ParentTweet(props){\r\n    const {tweet} = props\r\n    return tweet.parent ? <div className='row'>\r\n    <div className='col-11 mx-auto p-3 border rounded'>\r\n      <p className='mb-0 text-muted small'>Retweet</p>\r\n      <Tweet hideActions className={' '} tweet={tweet.parent} />\r\n    </div>\r\n    </div> : null\r\n  }\r\n  export function Tweet(props) {\r\n      const {tweet, didRetweet, hideActions} = props\r\n      const [actionTweet, setActionTweet] = useState(props.tweet ? props.tweet : null)\r\n      const className = props.className ? props.className : 'col-10 mx-auto col-md-6'\r\n      const path = window.location.pathname\r\n      const match = path.match(/(?<tweetid>\\d+)/)\r\n      const urlTweetId = match ? match.groups.tweetid : -1\r\n      const isDetail = `${tweet.id}` === `${urlTweetId}`\r\n      //const isDetail=false\r\n      const handleLink = (event) => {\r\n        event.preventDefault()\r\n        window.location.href = `/${tweet.id}`\r\n      }\r\n      const handlePerformAction = (newActionTweet, status) => {\r\n        if (status === 200){\r\n          setActionTweet(newActionTweet)\r\n        } else if (status === 201) {\r\n          if (didRetweet){\r\n            didRetweet(newActionTweet)\r\n          }\r\n        }\r\n        \r\n      }\r\n      \r\n      return <div className={className}>\r\n              <div>\r\n                <p>{tweet.id} - {tweet.content}</p>\r\n                <ParentTweet tweet={tweet} />\r\n              </div>\r\n          <div className='btn btn-group'>\r\n          {(actionTweet && hideActions !== true) && <React.Fragment>\r\n                  <ActionBtn tweet={actionTweet} didPerformAction={handlePerformAction} action={{type: \"like\", display:\"Likes\"}}/>\r\n                  <ActionBtn tweet={actionTweet} didPerformAction={handlePerformAction} action={{type: \"unlike\", display:\"Unlike\"}}/>\r\n                  <ActionBtn tweet={actionTweet} didPerformAction={handlePerformAction} action={{type: \"retweet\", display:\"Retweet\"}}/>\r\n                </React.Fragment>\r\n          }\r\n                  {isDetail === true ? null : <button className='btn btn-outline-primary btn-sm' onClick={handleLink}>View</button>}\r\n                </div>\r\n       \r\n      </div>\r\n    }","import React, {useEffect, useState}  from 'react'\r\n\r\nimport {\r\n  apiTweetList} from './lookup'\r\nimport {Tweet} from './detail'\r\n\r\nexport function TweetsList(props) {\r\n    const [tweetsInit, setTweetsInit] = useState([])\r\n    const [tweets, setTweets] = useState([])\r\n    const [tweetsDidSet, setTweetsDidSet] = useState(false)\r\n    useEffect(()=>{\r\n      const final = [...props.newTweets].concat(tweetsInit)\r\n      if (final.length !== tweets.length) {\r\n        setTweets(final)\r\n      }\r\n    }, [props.newTweets, tweets, tweetsInit])\r\n\r\n    useEffect(() => {\r\n      if (tweetsDidSet === false){\r\n        const handleTweetListLookup = (response, status) => {\r\n          if (status === 200){\r\n            setTweetsInit(response)\r\n            setTweetsDidSet(true)\r\n          } else {\r\n            alert(\"There was an error\")\r\n          }\r\n        }\r\n        apiTweetList(props.username,handleTweetListLookup)\r\n      }\r\n    }, [tweetsInit, tweetsDidSet, setTweetsDidSet, props.username])\r\n\r\n    const handleDidRetweet =(newTweet)=>{\r\n        const updateTweetsInit=[...tweetsInit]\r\n        updateTweetsInit.unshift(newTweet)\r\n        setTweetsInit(updateTweetsInit)\r\n\r\n        const updateFinalTweets=[...tweets]\r\n        updateFinalTweets.unshift(tweets)\r\n        setTweets(updateTweetsInit)\r\n    }\r\n    return tweets.map((item, index)=>{\r\n      return <Tweet \r\n      tweet={item}\r\n      didRetweet={handleDidRetweet}\r\n       className='my-5 py-5 border bg-white text-dark' \r\n       key={`${index}-{item.id}`} />\r\n    })\r\n  }","import React, {useEffect,useState}  from 'react'\r\n\r\nimport {TweetCreate} from './create'\r\nimport {TweetsList} from './list'\r\nimport {Tweet} from './detail'\r\nimport {apiTweetDetail} from './lookup'\r\n\r\nexport function TweetsComponent(props) {\r\n    const [newTweets, setNewTweets] = useState([])\r\n    const canTweet = props.canTweet === \"false\" ? false : true\r\n    const handleNewTweet = (newTweet) =>{\r\n      let tempNewTweets = [...newTweets]\r\n      tempNewTweets.unshift(newTweet)\r\n      setNewTweets(tempNewTweets)\r\n    }\r\n    return <div className={props.className}>\r\n            {canTweet === true && <TweetCreate didTweet={handleNewTweet} className='col-12 mb-3' />}\r\n          <TweetsList newTweets={newTweets} {...props} />\r\n    </div>\r\n}\r\n\r\nexport function TweetDetailComponent(props){\r\n  const {tweetId} = props\r\n  const [didLookup, setDidLookup] = useState(false)\r\n  const [tweet, setTweet] = useState(null)\r\n\r\n  const handleBackendLookup = (response, status) => {\r\n    if (status === 200) {\r\n      setTweet(response)\r\n    } else {\r\n      alert(\"There was an error finding your tweet.\")\r\n    }\r\n  }\r\n  useEffect(()=>{\r\n    if (didLookup === false){\r\n\r\n      apiTweetDetail(tweetId, handleBackendLookup)\r\n      setDidLookup(true)\r\n    }\r\n  }, [tweetId, didLookup, setDidLookup])\r\n\r\n  return tweet === null ? null : <Tweet tweet={tweet} className={props.className} />\r\n\r\n}","import React,{} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {TweetsComponent} from './tweets'\n\n\n\n\nfunction App() {\n  \n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <div>\n          <TweetsComponent/>\n        </div>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {TweetsComponent,TweetDetailComponent} from './tweets'\nimport * as serviceWorker from './serviceWorker';\n\nconst appEl = document.getElementById('root')\nif (appEl) {\n    ReactDOM.render(<App />, appEl);\n}\nconst e=React.createElement\nconst tweetsEl = document.getElementById(\"talkbits\")\nif (tweetsEl) {\n\n    ReactDOM.render(e(TweetsComponent,tweetsEl.dataset) , tweetsEl);\n}\n\nconst tweetDetailElements=document.querySelectorAll(\".talkbits-detail\")\n\ntweetDetailElements.forEach(container=> {\n    ReactDOM.render(\n        e(TweetDetailComponent, container.dataset), \n        container);\n})\n\n//ReactDOM.render(\n//  <React.StrictMode>\n//    <App />\n//  </React.StrictMode>,\n//  document.getElementById('root')\n//);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}